{"version":3,"sources":["Home.js","HotelsVols.js","HotelsVols.style.js","App.js","App.style.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","PageVolsAndHotels","state","response","_this2","this","fetch","then","json","data","setState","console","log","classes","props","className","styleTables","reservations","map","reservation","i","key","id","chambre","Date","start","toDateString","end","price","vols","vol","numeroVol","compagnie","place","depart","prix","React","Component","withStyles","& table","margin","& table, tr, th, td","borderCollapse","border","& th, td","padding","minWidth","App","BrowserRouter","layout","Link","to","view","Route","path","exact","component","HotelsVols","@global","body","backgroundColor","& nav","& ul","& li","display","textDecoration","fontSize","&:hover","& a","color","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6718ff1.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default () => (\n    <h1>Home</h1>\n)\n","import React from \"react\"\nimport withStyles from 'react-jss'\nimport styles from './HotelsVols.style'\n\n// const fakeData = {\n//   \"reservations\" : [ {\n//     \"chambre\" : 204,\n//     \"end\" : 1548575317752,\n//     \"id\" : 0,\n//     \"price\" : 105,\n//     \"start\" : 1548402517752\n//   } ],\n//   \"vols\" : [ {\n//     \"numeroVol\" : 8473,\n//     \"compagnie\" : \"Air France\",\n//     \"place\" : 105,\n//     \"depart\" : 1548406513160,\n//     \"prix\" : 185\n//   } ]\n// }\n\nconst url = 'http://localhost:8085/reservations'\n\nclass PageVolsAndHotels extends React.Component {\n  state = {\n    response: null\n  }\n\n  componentDidMount() {\n    // this.setState({response: fakeData})\n   fetch(url)\n     .then(function (response) {\n\n       return response.json()\n     })\n     .then(data => this.setState({response: data}))\n  }\n\n  render() {\n    console.log(this.state.response)\n    const { classes } = this.props\n    return (\n      <div className={classes.styleTables}>\n        <h1>Hotels</h1>\n        <table>\n          <tbody>\n            <tr>\n              <th>Id</th>\n              <th>Chambre</th>\n              <th>Start</th>\n              <th>End</th>\n              <th>Prix</th>\n            </tr>\n            {this.state.response && this.state.response.reservations.map((reservation, i) => (\n              <tr key={i}>\n                <td>{reservation.id}</td>\n                <td>{reservation.chambre}</td>\n                <td>{new Date(reservation.start).toDateString()}</td>\n                <td>{new Date(reservation.end).toDateString()}</td>\n                <td>{reservation.price}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        <h1>Vols</h1>\n        <table>\n          <tbody>\n          <tr>\n            <th>Numéro de vol</th>\n            <th>Compagnie</th>\n            <th>Place</th>\n            <th>Départ</th>\n            <th>Prix</th>\n          </tr>\n          {this.state.response && this.state.response.vols.map((vol, i) => (\n            <tr key={i}>\n              <td>{vol.numeroVol}</td>\n              <td>{vol.compagnie}</td>\n              <td>{vol.place}</td>\n              <td>{new Date(vol.depart).toDateString()}</td>\n              <td>{vol.prix}</td>\n            </tr>\n          ))}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(PageVolsAndHotels)\n","export default {\n  styleTables: {\n    '& table': {\n      margin: 'auto'\n    },\n    '& table, tr, th, td': {\n      borderCollapse: 'collapse',\n      border: '1px solid black'\n    },\n    '& th, td': {\n      padding: '5px 15px',\n      minWidth: 150\n    }\n  }\n}\n","import React, {Component} from 'react'\nimport './App.css'\nimport {BrowserRouter, Link, Route} from \"react-router-dom\"\nimport Home from \"./Home\"\nimport HotelsVols from \"./HotelsVols\"\nimport withStyles from 'react-jss'\nimport style from './App.style'\n\nclass App extends Component {\n  render() {\n    const { classes } = this.props\n    return (\n      <BrowserRouter>\n        <div className={classes.layout}>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/hotels&vols/\">Vols & Hotels</Link>\n              </li>\n            </ul>\n          </nav>\n          <div className={classes.view}>\n            <Route path=\"/\" exact component={Home}/>\n            <Route path=\"/hotels&vols/\" component={HotelsVols}/>\n          </div>\n        </div>\n      </BrowserRouter>\n\n    )\n  }\n}\n\nexport default withStyles(style)(App)\n","export default {\n  '@global': {\n    body: {\n      backgroundColor: 'white'\n    }\n  },\n  layout: {\n    '& nav': {\n      backgroundColor: '#0f1187'\n    },\n    '& ul': {\n      padding: 0,\n      margin: 0\n    },\n    '& li': {\n      display: 'inline-block',\n      textDecoration: 'none',\n      padding: 10,\n      fontSize: 20,\n      '&:hover': {\n        backgroundColor: '#1113d6'\n      },\n      '& a': {\n        color: 'white',\n        textDecoration: 'none',\n        '&:hover': {\n          color: 'white',\n          textDecoration: 'none'\n        }\n      }\n    }\n  },\n  view: {\n    padding: 15\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}